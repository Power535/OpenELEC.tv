diff -Naur kodi-15.2-02e7013/xbmc/cores/dvdplayer/DVDPlayer.cpp kodi.work/xbmc/cores/dvdplayer/DVDPlayer.cpp
--- kodi-15.2-02e7013/xbmc/cores/dvdplayer/DVDPlayer.cpp	2015-10-23 23:53:21.000000000 +0200
+++ kodi.work/xbmc/cores/dvdplayer/DVDPlayer.cpp	2016-03-20 22:34:32.559752113 +0100
@@ -81,6 +81,36 @@
 #endif
 #include "DVDPlayerAudio.h"
 
+#include "hi_svr_player.h"
+#include "hi_unf_avplay.h"
+#include "hi_unf_vo.h"
+#include "hi_unf_demux.h"
+#include "hi_unf_so.h"
+
+
+static HI_SVR_PLAYER_PARAM_S s_stParam = {
+        0, //u32DmxId
+        3, //u32PortId
+        0, //x
+        0, //y
+        0, //w
+        0, //h
+        100, //u32MixHeight
+        0, //hAVPlayer
+        0, //hVSink
+        0, //hASink
+        0, //u32SndPort
+        HI_UNF_DISPLAY1, //u32Display
+        100, //u32VDecErrCover
+        0 //hDRMClient
+};
+
+#define INVALID_TRACK_HDL     (0xffffffff)
+
+static HI_HANDLE s_hAudioTrack = (HI_HANDLE)INVALID_TRACK_HDL;
+static HI_HANDLE s_hWindow = (HI_HANDLE)HI_SVR_PLAYER_INVALID_HDL;
+
+
 using namespace std;
 using namespace PVR;
 
@@ -1092,6 +1122,419 @@
     OpenStream(current, stream->iId, stream->source);
 }
 
+void HISI_InitDevice()
+{
+  HI_S32 s32Ret;
+  HI_UNF_SND_ATTR_S stAttr;
+
+  HI_SYS_Init();
+
+  HI_SVR_PLAYER_EnableDbg(HI_TRUE);
+
+#if 0
+  s32Ret = HIADP_VO_Init(HI_UNF_VO_DEV_MODE_NORMAL);
+#else
+  s32Ret = HI_UNF_VO_Init(HI_UNF_VO_DEV_MODE_NORMAL);
+  CLog::Log(LOGDEBUG, "HI_UNF_VO_Init: %d", s32Ret);
+#endif
+
+#if 0
+  s32Ret = HIADP_Snd_Init();
+#else
+  s32Ret = HI_UNF_SND_Init();
+  CLog::Log(LOGDEBUG, "HI_UNF_SND_Init: %d", s32Ret);
+
+  s32Ret = HI_UNF_SND_GetDefaultOpenAttr(HI_UNF_SND_0, &stAttr);
+  CLog::Log(LOGDEBUG, "HI_UNF_SND_GetDefaultOpenAttr: %d", s32Ret);
+
+  s32Ret = HI_UNF_SND_Open(HI_UNF_SND_0, &stAttr);
+  CLog::Log(LOGDEBUG, "HI_UNF_SND_Open: %d", s32Ret);
+#endif
+
+  s32Ret = HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.FFMPEG_ADEC.decode.so");
+#if 0
+  s32Ret |= HIADP_AVPlay_RegADecLib();
+#else
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.BLURAYLPCM.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.AMRWB.codec.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.MP3.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.MP2.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.AAC.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.DOLBYTRUEHD.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.DRA.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.TRUEHDPASSTHROUGH.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.AMRNB.codec.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.WMA.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.COOK.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.DOLBYPLUS.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.DTSHD.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.DTSM6.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.DTSPASSTHROUGH.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.AC3PASSTHROUGH.decode.so");
+  s32Ret |= HI_UNF_AVPLAY_RegisterAcodecLib("libHA.AUDIO.PCM.decode.so");
+#endif
+  CLog::Log(LOGDEBUG, "HI_UNF_AVPLAY_RegisterAcodecLib(s): %d", s32Ret);
+
+  s32Ret = HI_UNF_AVPLAY_RegisterVcodecLib("libHV.VIDEO.FFMPEG_VDEC.decode.so");
+  CLog::Log(LOGDEBUG, "HI_UNF_AVPLAY_RegisterVcodecLib: %d", s32Ret);
+
+  s32Ret = HI_UNF_DMX_Init();
+  CLog::Log(LOGDEBUG, "HI_UNF_DMX_Init: %d", s32Ret);
+
+  s32Ret = HI_UNF_AVPLAY_Init();
+  CLog::Log(LOGDEBUG, "HI_UNF_AVPLAY_Init: %d", s32Ret);
+
+  s32Ret = HI_UNF_SO_Init();
+  CLog::Log(LOGDEBUG, "HI_UNF_SO_Init: %d", s32Ret);
+}
+
+HI_S32 openVidChannel(HI_HANDLE hAVPlay)
+{
+  HI_S32 s32Ret = HI_SUCCESS;
+  HI_UNF_WINDOW_ATTR_S stWinAttr;
+  HI_HANDLE hWindow = HI_SVR_PLAYER_INVALID_HDL;
+  HI_UNF_AVPLAY_OPEN_OPT_S stOpenOpt;
+
+  memset(&stWinAttr, 1, sizeof(stWinAttr));
+
+  stWinAttr.enDisp   = (HI_UNF_DISP_E) s_stParam.u32Display;
+  stWinAttr.bVirtual = HI_FALSE;
+  stWinAttr.stWinAspectAttr.enAspectCvrs = HI_UNF_VO_ASPECT_CVRS_LETTERBOX;//HI_UNF_VO_ASPECT_CVRS_IGNORE;//HI_UNF_VO_ASPECT_CVRS_LETTERBOX
+  stWinAttr.stWinAspectAttr.bUserDefAspectRatio = HI_FALSE;
+  stWinAttr.bUseCropRect      = HI_FALSE;
+  stWinAttr.stInputRect.s32X  = 0;
+  stWinAttr.stInputRect.s32Y  = 0;
+  stWinAttr.stInputRect.s32Width  = 0;
+  stWinAttr.stInputRect.s32Height = 0;
+  stWinAttr.stOutputRect.s32X = s_stParam.x;
+  stWinAttr.stOutputRect.s32Y = s_stParam.y;
+  stWinAttr.stOutputRect.s32Width  = s_stParam.w;
+  stWinAttr.stOutputRect.s32Height = s_stParam.h;
+
+  s32Ret = HI_UNF_VO_CreateWindow(&stWinAttr, &hWindow);
+  CLog::Log(LOGDEBUG, "HI_UNF_VO_CreateWindow: %d", s32Ret);
+  if (s32Ret != HI_SUCCESS)
+  {
+    return s32Ret;
+  }
+
+  stOpenOpt.enDecType  = HI_UNF_VCODEC_DEC_TYPE_NORMAL;
+  stOpenOpt.enCapLevel = HI_UNF_VCODEC_CAP_LEVEL_FULLHD;
+  stOpenOpt.enProtocolLevel = HI_UNF_VCODEC_PRTCL_LEVEL_H264;
+  s32Ret = HI_UNF_AVPLAY_ChnOpen(hAVPlay, HI_UNF_AVPLAY_MEDIA_CHAN_VID, &stOpenOpt);
+  CLog::Log(LOGDEBUG, "HI_UNF_AVPLAY_ChnOpen: %d", s32Ret);
+  if (s32Ret != HI_SUCCESS)
+  {
+    HI_UNF_VO_DestroyWindow(hWindow);
+    return s32Ret;
+  }
+
+  s32Ret = HI_UNF_VO_AttachWindow(hWindow, hAVPlay);
+  CLog::Log(LOGDEBUG, "HI_UNF_VO_AttachWindow: %d", s32Ret);
+  if (s32Ret != HI_SUCCESS)
+  {
+    HI_UNF_AVPLAY_ChnClose(hAVPlay, HI_UNF_AVPLAY_MEDIA_CHAN_VID);
+    HI_UNF_VO_DestroyWindow(hWindow);
+    return s32Ret;
+  }
+
+  s32Ret = HI_UNF_VO_SetWindowEnable(hWindow, HI_TRUE);
+  CLog::Log(LOGDEBUG, "HI_UNF_VO_SetWindowEnable: %d", s32Ret);
+  if (s32Ret != HI_SUCCESS)
+  {
+    HI_UNF_VO_DetachWindow(hWindow, hAVPlay);
+    HI_UNF_AVPLAY_ChnClose(hAVPlay, HI_UNF_AVPLAY_MEDIA_CHAN_VID);
+    HI_UNF_VO_DestroyWindow(hWindow);
+    return s32Ret;
+  }
+
+  s_hWindow = hWindow;
+
+  return s32Ret;
+}
+
+HI_S32 openAudChannel(HI_HANDLE hAVPlay)
+{
+  HI_S32 s32Ret = HI_SUCCESS;
+  HI_UNF_AUDIOTRACK_ATTR_S stTrackAttr;
+  HI_UNF_SND_GAIN_ATTR_S stGain;
+  HI_HANDLE hTrack = (HI_HANDLE)INVALID_TRACK_HDL;
+
+  memset(&stTrackAttr, 0, sizeof(stTrackAttr));
+
+  stTrackAttr.enTrackType = HI_UNF_SND_TRACK_TYPE_MASTER;
+
+  s32Ret = HI_UNF_SND_GetDefaultTrackAttr(stTrackAttr.enTrackType, &stTrackAttr);
+  CLog::Log(LOGDEBUG, "HI_UNF_SND_GetDefaultTrackAttr: %d", s32Ret);
+  if (s32Ret != HI_SUCCESS)
+  {
+    return s32Ret;
+  }
+
+  stTrackAttr.enTrackType = HI_UNF_SND_TRACK_TYPE_MASTER;
+  s32Ret = HI_UNF_SND_CreateTrack(HI_UNF_SND_0, &stTrackAttr, &hTrack);
+  CLog::Log(LOGDEBUG, "HI_UNF_SND_CreateTrack: %d", s32Ret);
+  if (s32Ret != HI_SUCCESS)
+  {
+    return s32Ret;
+  }
+
+  stGain.bLinearMode = HI_TRUE;
+  stGain.s32Gain = s_stParam.u32MixHeight;
+
+  s32Ret = HI_UNF_SND_SetTrackWeight(hTrack, &stGain);
+  CLog::Log(LOGDEBUG, "HI_UNF_SND_SetTrackWeight: %d", s32Ret);
+  if (s32Ret != HI_SUCCESS)
+  {
+    return s32Ret;
+  }
+
+  s32Ret = HI_UNF_AVPLAY_ChnOpen(hAVPlay, HI_UNF_AVPLAY_MEDIA_CHAN_AUD, HI_NULL);
+  CLog::Log(LOGDEBUG, "HI_UNF_AVPLAY_ChnOpen: %d", s32Ret);
+  if (s32Ret != HI_SUCCESS)
+  {
+    HI_UNF_SND_DestroyTrack(hTrack);
+    return s32Ret;
+  }
+
+  s32Ret = HI_UNF_SND_Attach(hTrack, hAVPlay);
+  CLog::Log(LOGDEBUG, "HI_UNF_SND_Attach: %d", s32Ret);
+  if (s32Ret != HI_SUCCESS)
+  {
+    HI_UNF_AVPLAY_ChnClose(hAVPlay, HI_UNF_AVPLAY_MEDIA_CHAN_AUD);
+    HI_UNF_SND_DestroyTrack(hTrack);
+    return s32Ret;
+  }
+
+  s_hAudioTrack = hTrack;
+
+  return s32Ret;
+}
+
+void HISI_InitPlayer()
+{
+  HI_S32 s32Ret;
+  HI_UNF_AVPLAY_ATTR_S stAVPlayAttr;
+  HI_HANDLE hAVPlay = HI_SVR_PLAYER_INVALID_HDL;
+
+  s32Ret = HI_UNF_AVPLAY_GetDefaultConfig(&stAVPlayAttr, HI_UNF_AVPLAY_STREAM_TYPE_ES);
+  CLog::Log(LOGDEBUG, "HI_UNF_AVPLAY_GetDefaultConfig: %d", s32Ret);
+
+  stAVPlayAttr.stStreamAttr.u32VidBufSize = (20 * 1024 * 1024);
+  stAVPlayAttr.stStreamAttr.u32AudBufSize = (4 *1024 * 1024);
+
+  s32Ret = HI_UNF_AVPLAY_Create(&stAVPlayAttr, &hAVPlay);
+  CLog::Log(LOGDEBUG, "HI_UNF_AVPLAY_Create: %d", s32Ret);
+  if (HI_SUCCESS == s32Ret)
+  {
+    s32Ret = openVidChannel(hAVPlay);
+    CLog::Log(LOGDEBUG, "openVidChannel: %d", s32Ret);
+    if (s32Ret == HI_SUCCESS)
+    {
+      s32Ret = openAudChannel(hAVPlay);
+      CLog::Log(LOGDEBUG, "openAudChannel: %d", s32Ret);
+      if (s32Ret != HI_SUCCESS)
+      {
+        hAVPlay = HI_SVR_PLAYER_INVALID_HDL;
+      }
+    }
+    else
+    {
+      hAVPlay = HI_SVR_PLAYER_INVALID_HDL;
+    }
+  }
+  else
+  {
+    hAVPlay = HI_SVR_PLAYER_INVALID_HDL;
+  }
+
+  s32Ret = HI_SVR_PLAYER_Init();
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_Init: %d", s32Ret);
+
+  s32Ret = HI_SVR_PLAYER_RegisterDynamic(HI_SVR_PLAYER_DLL_PARSER, "libformat.so");
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_RegisterDynamic(libformat.so): %d", s32Ret);
+
+  s32Ret = HI_SVR_PLAYER_RegisterDynamic(HI_SVR_PLAYER_DLL_PARSER, "libffmpegformat.so");
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_RegisterDynamic(libffmpegformat.so): %d", s32Ret);
+
+  s_stParam.hAVPlayer = hAVPlay;
+  s_stParam.hDRMClient = (HI_HANDLE)NULL;
+}
+
+static HI_S32 hiPlayerEventCallback(HI_HANDLE hPlayer, HI_SVR_PLAYER_EVENT_S *pstruEvent)
+{
+  if (0 == hPlayer || NULL == pstruEvent)
+  {
+    CLog::Log(LOGDEBUG, "hiPlayerEventCallback: hPlayer=%d, pstruEvent = %d", hPlayer, (int) pstruEvent);
+    return HI_SUCCESS;
+  }
+
+  CLog::Log(LOGDEBUG, "hiPlayerEventCallback: pstruEvent->eEvent = %d", pstruEvent->eEvent);
+
+  switch (pstruEvent->eEvent)
+  {
+    case HI_SVR_PLAYER_EVENT_STATE_CHANGED:
+    {
+      HI_SVR_PLAYER_STATE_E eEventBk = (HI_SVR_PLAYER_STATE_E)*pstruEvent->pu8Data;
+      CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_EVENT_STATE_CHANGED: state = %d", eEventBk);
+      switch (eEventBk)
+      {
+        case HI_SVR_PLAYER_STATE_PLAY:
+          CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_STATE_PLAY");
+#if 0
+          m_messenger.Put(new CDVDMsgInt(CDVDMsg::PLAYER_STARTED, DVDPLAYER_AUDIO));
+          m_messenger.Put(new CDVDMsgInt(CDVDMsg::PLAYER_STARTED, DVDPLAYER_VIDEO));
+#endif
+    	  CApplicationMessenger::Get().SwitchToFullscreen();
+
+          break;
+
+        default:
+          break;
+      }
+      break;
+    }
+
+    case HI_SVR_PLAYER_EVENT_FIRST_FRAME_TIME:
+    {
+      HI_U32 u32Time = *((HI_U32*)pstruEvent->pu8Data);
+      CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_EVENT_FIRST_FRAME_TIME: %d ms", u32Time);
+      break;
+    }
+
+    case HI_SVR_PLAYER_EVENT_SOF:
+      break;
+
+    case HI_SVR_PLAYER_EVENT_EOF:
+      break;
+
+    case HI_SVR_PLAYER_EVENT_STREAMID_CHANGED:
+      break;
+
+    case HI_SVR_PLAYER_EVENT_PROGRESS:
+	{
+	  HI_SVR_PLAYER_PROGRESS_S *pstProgress = NULL;
+	  pstProgress = (HI_SVR_PLAYER_PROGRESS_S*)pstruEvent->pu8Data;
+	  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_EVENT_PROGRESS, progress = %d, Duration:%lld ms,Buffer size:%lld bytes",
+			  pstProgress->u32Progress, pstProgress->s64Duration, pstProgress->s64BufferSize);
+	  break;
+	}
+
+    case HI_SVR_PLAYER_EVENT_ERROR:
+    {
+      HI_S32 s32SysError = (HI_S32)*pstruEvent->pu8Data;
+      CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_EVENT_ERROR: err = %d", s32SysError);
+      break;
+    }
+
+    case HI_SVR_PLAYER_EVENT_BUFFER_STATE:
+    {
+      HI_SVR_PLAYER_BUFFER_S *pstBufStat = (HI_SVR_PLAYER_BUFFER_S*)pstruEvent->pu8Data;
+      CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_EVENT_BUFFER_STATE: state = %d", pstBufStat->eType);
+      break;
+    }
+
+    default:
+      break;
+  }
+
+  return HI_SUCCESS;
+}
+
+HI_HANDLE HISI_CreatePlayer(const char* urlFile)
+{
+  HI_S32 s32Ret;
+  HI_HANDLE hPlayer = (HI_HANDLE)NULL;
+  HI_SVR_PLAYER_MEDIA_S stMedia;
+
+  s32Ret = HI_SVR_PLAYER_Create(&s_stParam, &hPlayer);
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_Create: %d", s32Ret);
+
+  s32Ret = HI_SVR_PLAYER_RegCallback(hPlayer, hiPlayerEventCallback);
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_RegCallback: %d", s32Ret);
+
+  HI_SVR_PLAYER_Invoke(hPlayer, HI_FORMAT_INVOKE_SET_LOG_LEVEL, (HI_VOID *)HI_FORMAT_LOG_INFO/*HI_FORMAT_LOG_QUITE*/);
+  HI_SVR_PLAYER_EnableDbg(HI_TRUE);
+
+  memset(&stMedia, 0, sizeof(stMedia));
+  sprintf(stMedia.aszUrl, "%s", urlFile);
+  //strncpy(stMedia.aszUrl, urlFile, (size_t)HI_FORMAT_MAX_URL_LEN - 1);
+
+  s32Ret = HI_SVR_PLAYER_SetMedia(hPlayer, HI_SVR_PLAYER_MEDIA_STREAMFILE, &stMedia);
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_SetMedia: %d", s32Ret);
+
+  HI_SVR_PLAYER_METADATA_S stMetaData;
+
+  memset(&stMetaData, 0, sizeof(HI_SVR_PLAYER_METADATA_S));
+
+  s32Ret = HI_SVR_PLAYER_Invoke(hPlayer, HI_FORMAT_INVOKE_GET_METADATA, &stMetaData);
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_Invoke(HI_FORMAT_INVOKE_GET_METADATA): %d", s32Ret);
+  if (s32Ret == HI_SUCCESS)
+  {
+      HI_SVR_META_PRINT(&stMetaData);
+  }
+
+  return hPlayer;
+}
+
+void HISI_Play(HI_HANDLE hPlayer)
+{
+  HI_S32 s32Ret;
+
+  s32Ret = HI_SVR_PLAYER_Play(hPlayer);
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_Play: %d", s32Ret);
+}
+
+void closeVidChannel(HI_HANDLE hAVPlay)
+{
+
+}
+
+void closeAudChannel(HI_HANDLE hAVPlay)
+{
+
+}
+
+void HISI_DestroyPlayer(HI_HANDLE hPlayer)
+{
+  HI_S32 s32Ret;
+
+  s32Ret = HI_SVR_PLAYER_RegCallback(hPlayer, NULL);
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_RegCallback(NULL): %d", s32Ret);
+
+  s32Ret = HI_SVR_PLAYER_Destroy(hPlayer);
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_Destroy: %d", s32Ret);
+
+  HI_HANDLE hAVPlay = s_stParam.hAVPlayer;
+  if (hAVPlay != HI_SVR_PLAYER_INVALID_HDL)
+  {
+      closeVidChannel(hAVPlay);
+      closeAudChannel(hAVPlay);
+      HI_UNF_AVPLAY_Destroy(hAVPlay);
+      s_stParam.hAVPlayer = HI_SVR_PLAYER_INVALID_HDL;
+  }
+
+  s32Ret = HI_SVR_PLAYER_UnRegisterDynamic(HI_SVR_PLAYER_DLL_PARSER, NULL);
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_UnRegisterDynamic: %d", s32Ret);
+
+  s32Ret = HI_SVR_PLAYER_Deinit();
+  CLog::Log(LOGDEBUG, "HI_SVR_PLAYER_Deinit: %d", s32Ret);
+
+  s32Ret = HI_UNF_AVPLAY_DeInit();
+  CLog::Log(LOGDEBUG, "HI_UNF_AVPLAY_DeInit: %d", s32Ret);
+
+  s32Ret = HI_UNF_DMX_DeInit();
+  CLog::Log(LOGDEBUG, "HI_UNF_DMX_DeInit: %d", s32Ret);
+
+  s32Ret = HI_UNF_SO_DeInit();
+  CLog::Log(LOGDEBUG, "HI_UNF_SO_DeInit: %d", s32Ret);
+
+  //(HI_VOID)HIADP_Snd_DeInit();
+
+  //(HI_VOID)HIADP_VO_DeInit();
+
+}
+
 void CDVDPlayer::Process()
 {
   if (!OpenInputStream())
@@ -1100,6 +1543,44 @@
     return;
   }
 
+  HISI_InitDevice();
+  HISI_InitPlayer();
+  {
+	  HI_HANDLE hPlayer = HISI_CreatePlayer(m_filename.c_str());
+	  HISI_Play(hPlayer);
+
+	  m_callback.OnPlayBackStarted();
+
+	  m_ready.Set();
+
+#if 0
+	  HISI_AguardarPlayFinalizar();
+#else
+	  while (!m_bAbortRequest)
+	  {
+		// handle messages send to this thread, like seek or demuxer reset requests
+		HandleMessages();
+
+		if(m_bAbortRequest)
+		  break;
+
+		//...
+
+        Sleep(100);
+	  } //while (!m_bAbortRequest)
+#endif
+
+	  CLog::Log(LOGDEBUG, "m_bAbortRequest: %d", m_bAbortRequest);
+
+#if 0
+	  HISI_HideVideo();
+#endif
+
+	  HISI_DestroyPlayer(hPlayer);
+
+	  return;
+  }
+
   if (CDVDInputStream::IMenus* ptr = dynamic_cast<CDVDInputStream::IMenus*>(m_pInputStream))
   {
     CLog::Log(LOGNOTICE, "DVDPlayer: playing a file with menu's");
